---
AWSTemplateFormatVersion: 2010-09-09
Description: Elastic Load Balancer
Parameters:
  Subnets:
    Type: List
    Description: IDs of subnets to balance between
  NetworkIngress:
    Type: String
    Description: CIDR
  CertificateARN:
    Type: String
    Description: SSL/TLS certificate to use
Resources:
  SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow everything
      VpcId:
        Ref: InfraVPC
      SecurityGroupIngress:
      - CidrIp: !Ref Ingress
        IpProtocol: -1
        FromPort: 0
        ToPort: 65535
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
        FromPort: 0
        ToPort: 65535
      Tags: [{"Key": "Name", "Value": {"Fn::Join": [" ",[{"Ref": "AWS::StackName"}, "resource"]]}}]
      VpcId: !GetAtt {!Select [0, !Ref Subnets]}.VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Tags: [{"Key": "Name", "Value": {"Fn::Join": [" ",[{"Ref": "AWS::StackName"}, "resource"]]}}]
      Subnets: !Ref Subnets
      CrossZone: True
      Scheme: internet-facing
      SecurityGroups:
      - !Ref SecGroup
      HealthCheck:
        HealthyThreshold: 1
        Interval: 5
        Target: HTTP:8080
        Timeout: 4
        UnhealthyThreshold: 2
      Listeners:
      - LoadBalancerPort: 80
        InstancePort: 8080
        Protocol: HTTP
        InstanceProtocol: HTTP
      - LoadBalancerPort: 443
        InstancePort: 8443
        Protocol: HTTPS
        InstanceProtocol: HTTP
        SslCertificateId: !Ref CertificateARN
